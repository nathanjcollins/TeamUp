@page "/admin/game/{id:int}"
@using TeamUp.Services
@using TeamUp.Pages.Admin.Games.Models
@using TeamUp.Data.Models
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager NavigationManager
@inject GameService GameService
@inject PositionService PositionService
@inject RankService RankService
@if (!_loaded)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (_game is null)
{
    <p>
        <em>Game not found</em>
    </p>
}
else
{
    <h3><a class="header-nav-item" @onclick="@(() => NavigationManager.NavigateTo("admin"))">Admin</a> > <a class="header-nav-item" @onclick="@(() => NavigationManager.NavigateTo("admin/games"))">Games</a> > @_game!.Name</h3>

    <GameForm Game="@_game"></GameForm>
    
    <div class="card mb-2">
        <div class="card-body">
            <h4 class="card-title">Positions</h4>
            
            <button class="btn btn-primary" @onclick="AddNewPosition"><span class="oi oi-plus" aria-hidden="true"></span> New</button>
            
            @if (_addNewPosition)
            {
                <EditForm Model="@_positionModel" OnValidSubmit="@OnPositionSubmit">
                    <div class="mb-3">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>    
                    </div>
        
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" id="name" @bind-Value="_positionModel.Name"></InputText>
                    </div>
        
                    <div class="mb-3">
                        <button disabled="@_positionSaving" type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            }
            
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var position in _positions)
                {
                    <tr>
                        <td>@position.Name</td>
                        <td>
                            @* <button class="btn btn-primary me-2" @onclick="@(() => NavigateToGame(game.Id))">Edit</button> *@
                            @if (position.IsDeleted)
                            {
                                <button class="btn btn-secondary" @onclick="@(() => UndoDeletePositionAsync(position))">Undo</button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="@(() => DeletePositionAsync(position))">Delete</button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    
    
    
    <div class="card mb-2">
        <div class="card-body">
            <h4 class="card-title">Ranks</h4>
            <button class="btn btn-primary" @onclick="AddNewRank"><span class="oi oi-plus" aria-hidden="true"></span> New</button>
            
            @if (_addNewRank)
            {
                <EditForm Model="@_rankModel" OnValidSubmit="@OnRankSubmit">
                    <div class="mb-3">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>    
                    </div>
        
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" id="name" @bind-Value="_rankModel.Name"></InputText>
                    </div>
        
                    <div class="mb-3">
                        <button disabled="@_rankSaving" type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            }
            
            <table class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var rank in _ranks)
                {
                    <tr>
                        <td>@rank.Name</td>
                        <td>
                            @* <button class="btn btn-primary me-2" @onclick="@(() => NavigateToGame(game.Id))">Edit</button> *@
                            @if (rank.IsDeleted)
                            {
                                <button class="btn btn-secondary" @onclick="@(() => UndoDeleteRankAsync(rank))">Undo</button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="@(() => DeleteRankAsync(rank))">Delete</button>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    
    
    
    
}

@code {

    [Parameter]
    public int Id { get; set; }

    private List<Position> _positions = null!;
    private List<Rank> _ranks = null!;

    private GameModel? _game;
    private PositionModel _positionModel = null!;
    private bool _addNewPosition;
    private bool _positionSaving;
    private RankModel _rankModel = null!;
    private bool _addNewRank;
    private bool _rankSaving;
    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var game = await GameService.GetByIdAsync(Id);

        _positions = await PositionService.GetByGameIdAsync(Id);
        _ranks = await RankService.GetByGameIdAsync(Id);

        if (game != null)
        {
            _game = new GameModel { Id = Id, Name = game.Name, PlatformIds = game.GamePlatforms.Select(x => x.PlatformId).ToArray() };
        }

        _loaded = true;
    }

    private void AddNewPosition()
    {
        _positionModel = new PositionModel { GameId = Id };
        _addNewPosition = !_addNewPosition;
    }

    private async Task OnPositionSubmit()
    {
        _positionSaving = true;

        await PositionService.UpdateAsync(_positionModel);
        _positions = await PositionService.GetByGameIdAsync(Id);

        _addNewPosition = false;
        _positionSaving = false;
    }

    private async Task DeletePositionAsync(Position position)
    {
        await PositionService.DeleteByIdAsync(position.Id);

        position.IsDeleted = true;
    }
    
    private async Task UndoDeletePositionAsync(Position position)
    {
        await PositionService.UndoDeleteByIdAsync(position.Id);

        position.IsDeleted = false;
    }
    
    private void AddNewRank()
    {
        _rankModel = new RankModel { GameId = Id };
        _addNewRank = !_addNewRank;
    }

    private async Task OnRankSubmit()
    {
        _rankSaving = true;

        await RankService.UpdateAsync(_rankModel);
        _ranks = await RankService.GetByGameIdAsync(Id);

        _addNewRank = false;
        _rankSaving = false;
    }

    private async Task DeleteRankAsync(Rank rank)
    {
        await RankService.DeleteByIdAsync(rank.Id);

        rank.IsDeleted = true;
    }
    
    private async Task UndoDeleteRankAsync(Rank rank)
    {
        await RankService.UndoDeleteByIdAsync(rank.Id);

        rank.IsDeleted = false;
    }
}